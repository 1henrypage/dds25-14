version: "3"
services:
  gateway:
    image: nginx:1.25-bookworm
    container_name: gateway
    volumes:
      - ./gateway_nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8000:80"
    depends_on:
      - order-publisher
      - payment-publisher
      - stock-publisher
    networks:
      - order-net
      - stock-net
      - payment-net

  rabbitmq:
    image: rabbitmq:4.0.6-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: pass
    ports:
      - "5672:5672"   # AMQP protocol
      - "15672:15672" # Management UI
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - order-net
      - stock-net
      - payment-net

  order-publisher:
    build: ./order-publisher
    image: order-publisher:latest
    container_name: order-publisher
    environment:
      - RABBITMQ_URL=amqp://user:pass@rabbitmq:5672/
      - ROUTE_KEY=order-egress
    command: hypercorn --bind 0.0.0.0:5000 --workers 2 --graceful-timeout 30 --read-timeout 30 --log-level info app:app
    depends_on:
      common-setup:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    networks:
      - order-net
    volumes:
      - ./common:/home/common

  order-worker:
    build: ./order-worker
    image: order-worker:latest
    env_file:
      - env/order.env
    depends_on:
      cluster-setup:
        condition: service_completed_successfully
      common-setup:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    networks:
      - order-net
    volumes:
      - ./common:/home/common
    deploy:
      replicas: 10
      restart_policy:
        condition: on-failure

  payment-publisher:
    build: ./payment-publisher
    image: payment-publisher:latest
    container_name: payment-publisher
    environment:
      - RABBITMQ_URL=amqp://user:pass@rabbitmq:5672/
      - ROUTE_KEY=payment-egress
    command: hypercorn --bind 0.0.0.0:5000 --workers 2 --graceful-timeout 30 --read-timeout 30 --log-level info app:app
    depends_on:
      common-setup:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    networks:
      - payment-net
    volumes:
      - ./common:/home/common

  payment-worker:
    build: ./payment-worker
    image: payment-worker:latest
    env_file:
      - env/payment.env
    depends_on:
      cluster-setup:
        condition: service_completed_successfully
      common-setup:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    networks:
      - payment-net
    volumes:
      - ./common:/home/common
    deploy:
      replicas: 10
      restart_policy:
        condition: on-failure

  stock-publisher:
    build: ./stock-publisher
    image: stock-publisher:latest
    container_name: stock-publisher
    environment:
      - RABBITMQ_URL=amqp://user:pass@rabbitmq:5672/
      - ROUTE_KEY=stock-egress
    command: hypercorn --bind 0.0.0.0:5000 --workers 2 --graceful-timeout 30 --read-timeout 30 --log-level info app:app
    depends_on:
      common-setup:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    networks:
      - stock-net
    volumes:
      - ./common:/home/common

  stock-worker:
    build: ./stock-worker
    image: stock-worker:latest
    env_file:
      - env/stock.env
    depends_on:
      cluster-setup:
        condition: service_completed_successfully
      common-setup:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    networks:
      - stock-net
    volumes:
      - ./common:/home/common
    deploy:
      replicas: 10
      restart_policy:
        condition: on-failure

  order-master-1:
    image: redis:7.4.2
    container_name: order-master-1
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-node-timeout", "3000", "--appendonly", "yes", "--cluster-require-full-coverage","yes"]
    networks:
      - order-net

  order-master-2:
    image: redis:7.4.2
    container_name: order-master-2
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-node-timeout", "3000", "--appendonly", "yes", "--cluster-require-full-coverage","yes"]
    networks:
      - order-net

  order-master-3:
    image: redis:7.4.2
    container_name: order-master-3
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-node-timeout", "3000", "--appendonly", "yes", "--cluster-require-full-coverage","yes"]
    networks:
      - order-net

  order-replica-1:
    image: redis:7.4.2
    container_name: order-replica-1
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-node-timeout", "3000", "--appendonly", "yes", "--cluster-require-full-coverage","yes"]
    networks:
      - order-net

  order-replica-2:
    image: redis:7.4.2
    container_name: order-replica-2
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-node-timeout", "3000", "--appendonly", "yes", "--cluster-require-full-coverage","yes"]
    networks:
      - order-net

  order-replica-3:
    image: redis:7.4.2
    container_name: order-replica-3
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-node-timeout", "3000", "--appendonly", "yes", "--cluster-require-full-coverage","yes"]
    networks:
      - order-net

  # Payment domain
  payment-master-1:
    image: redis:7.4.2
    container_name: payment-master-1
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-node-timeout", "3000", "--appendonly", "yes", "--cluster-require-full-coverage","yes"]
    networks:
      - payment-net

  payment-master-2:
    image: redis:7.4.2
    container_name: payment-master-2
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-node-timeout", "3000", "--appendonly", "yes", "--cluster-require-full-coverage","yes"]
    networks:
      - payment-net

  payment-master-3:
    image: redis:7.4.2
    container_name: payment-master-3
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-node-timeout", "3000", "--appendonly", "yes", "--cluster-require-full-coverage","yes"]
    networks:
      - payment-net

  payment-replica-1:
    image: redis:7.4.2
    container_name: payment-replica-1
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-node-timeout", "3000", "--appendonly", "yes", "--cluster-require-full-coverage","yes"]
    networks:
      - payment-net

  payment-replica-2:
    image: redis:7.4.2
    container_name: payment-replica-2
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-node-timeout", "3000", "--appendonly", "yes", "--cluster-require-full-coverage","yes"]
    networks:
      - payment-net

  payment-replica-3:
    image: redis:7.4.2
    container_name: payment-replica-3
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-node-timeout", "3000", "--appendonly", "yes", "--cluster-require-full-coverage","yes"]
    networks:
      - payment-net

  # Stock domain
  stock-master-1:
    image: redis:7.4.2
    container_name: stock-master-1
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-node-timeout", "3000", "--appendonly", "yes", "--cluster-require-full-coverage","yes"]
    networks:
      - stock-net

  stock-master-2:
    image: redis:7.4.2
    container_name: stock-master-2
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-node-timeout", "3000", "--appendonly", "yes", "--cluster-require-full-coverage","yes"]
    networks:
      - stock-net

  stock-master-3:
    image: redis:7.4.2
    container_name: stock-master-3
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-node-timeout", "3000", "--appendonly", "yes", "--cluster-require-full-coverage","yes"]
    networks:
      - stock-net

  stock-replica-1:
    image: redis:7.4.2
    container_name: stock-replica-1
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-node-timeout", "3000", "--appendonly", "yes", "--cluster-require-full-coverage","yes"]
    networks:
      - stock-net

  stock-replica-2:
    image: redis:7.4.2
    container_name: stock-replica-2
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-node-timeout", "3000", "--appendonly", "yes", "--cluster-require-full-coverage","yes"]
    networks:
      - stock-net

  stock-replica-3:
    image: redis:7.4.2
    container_name: stock-replica-3
    command: ["redis-server", "--cluster-enabled", "yes", "--cluster-node-timeout", "3000", "--appendonly", "yes", "--cluster-require-full-coverage","yes"]
    networks:
      - stock-net


  scale-workers:
    build: ./scripts/scale-workers
    image: scale-workers:latest
    container_name: scale-workers
    restart: always
    environment:
      - RABBITMQ_USER=user
      - RABBITMQ_PASS=pass
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_API_PORT=15672
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - order-net
      - stock-net
      - payment-net

  cluster-setup:
    build: ./scripts/setup-db
    container_name: cluster-setup
    depends_on:
      - payment-master-1
      - payment-master-2
      - payment-master-3
      - payment-replica-1
      - payment-replica-2
      - payment-replica-3
      - stock-master-1
      - stock-master-2
      - stock-master-3
      - stock-replica-1
      - stock-replica-2
      - stock-replica-3
      - order-master-1
      - order-master-2
      - order-master-3
      - order-replica-1
      - order-replica-2
      - order-replica-3
    networks:
      - order-net
      - stock-net
      - payment-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  common-setup:
    build: ./common
    container_name: common-setup
    volumes:
      - ./common:/home/common

volumes:
  common:

networks:
  order-net:
    driver: bridge
  payment-net:
    driver: bridge
  stock-net:
    driver: bridge
